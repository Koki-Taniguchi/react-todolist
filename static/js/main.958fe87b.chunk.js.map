{"version":3,"sources":["items/Form.js","items/List.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","addTodo","bind","handleChange","state","newTodo","todo","this","setState","e","target","value","type","onChange","onClick","React","Component","List","listItems","todos","map","index","key","deleteTodo","App","concat","list","splice","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAEqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,MAAQ,CAACC,QAAS,IAJN,E,qEAOXC,GACNC,KAAKC,SAAS,CAACH,QAAS,KACxBE,KAAKP,MAAMC,QAAQK,K,mCAGRG,GACXF,KAAKC,SAAS,CAACH,QAASI,EAAEC,OAAOC,U,+BAGzB,IAAD,OACP,OACE,6BACE,uCAEE,2BAAOC,KAAK,OAAOD,MAAOJ,KAAKH,MAAMC,QAASQ,SAAUN,KAAKJ,gBAE/D,4BAAQW,QAAS,kBAAM,EAAKb,QAAQ,EAAKG,MAAMC,WAA/C,gB,GAxB0BU,IAAMC,YCAnBC,E,iLACT,IAAD,OACDC,EAAYX,KAAKP,MAAMmB,MAAMC,KAAI,SAACd,EAAMe,GAAP,OACrC,wBAAIC,IAAKD,GACNf,EACD,4BAAQQ,QAAS,kBAAM,EAAKd,MAAMuB,WAAWF,KAA7C,oBAIJ,OACE,4BAAKH,O,GAVuBH,IAAMC,WCGnBQ,E,YACnB,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKqB,WAAa,EAAKA,WAAWrB,KAAhB,gBAClB,EAAKE,MAAQ,CACXe,MAAO,IALQ,E,qEASXb,GACDA,GACLC,KAAKC,SAAS,CAACW,MAAOZ,KAAKH,MAAMe,MAAMM,OAAOnB,O,iCAGrCe,GACT,IAAMK,EAAOnB,KAAKH,MAAMe,MAAMM,SAC9BC,EAAKC,OAAON,EAAO,GACnBd,KAAKC,SAAS,CAACW,MAAOO,M,+BAItB,OACE,yBAAKE,UAAU,OACb,kBAAC,EAAD,CACE3B,QAASM,KAAKN,UAEhB,kBAAC,EAAD,CACEkB,MAAOZ,KAAKH,MAAMe,MAClBI,WAAYhB,KAAKgB,kB,GA7BMR,IAAMC,WCOnBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.958fe87b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTodo = this.addTodo.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {newTodo: ''};\n  }\n\n  addTodo(todo) {\n    this.setState({newTodo: ''})\n    this.props.addTodo(todo);\n  }\n\n  handleChange(e) {\n    this.setState({newTodo: e.target.value})\n  }\n\n  render() {\n    return(\n      <div>\n        <label>\n          Todo:\n          <input type='text' value={this.state.newTodo} onChange={this.handleChange} />\n        </label>\n        <button onClick={() => this.addTodo(this.state.newTodo)}>\n          addTodo\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class List extends React.Component {\n  render() {\n    const listItems = this.props.todos.map((todo, index) =>\n      <li key={index}>\n        {todo}\n        <button onClick={() => this.props.deleteTodo(index)} >削除</button>\n      </li>\n    );\n\n    return(\n      <ul>{listItems}</ul>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Form from './items/Form';\nimport List from './items/List';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTodo = this.addTodo.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n    this.state = {\n      todos: [],\n    }\n  }\n\n  addTodo(todo) {\n    if (!todo) return;\n    this.setState({todos: this.state.todos.concat(todo)})\n  }\n\n  deleteTodo(index) {\n    const list = this.state.todos.concat();\n    list.splice(index, 1);\n    this.setState({todos: list})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          addTodo={this.addTodo}\n        />\n        <List\n          todos={this.state.todos}\n          deleteTodo={this.deleteTodo}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}